[apidocs]
keywords = ["apidocs", "docs", "api"]
content = """
***__Documentation can be found on [our website](<https://www.sapphirejs.dev/docs/General/Welcome>)__***
"""
hoisted = true

[djsquestions]
keywords = ["djsquestions", "djs", "discordjs"]
content = """
For as far as Discord bot development is concerned, this server is primarily for Sapphire. While we can help you with Discord.js related problems, it is often advisable to join [the official Discord.js server](<https://discord.gg/djs>).
"""

[asking]
keywords = ["asking", "asking questions", "questions", "how to ask questions"]
content = """
When asking for help, make sure to provide as much detail as possible. What have you tried so far? Do you have stacktraces that you can show us? What are you trying to achieve? Try to answer these questions and others, so we do not have to ask for them afterwards.
> ❯ For a good guide on how to ask questions, see [the instructions that StackOverflow gives](<https://stackoverflow.com/help/how-to-ask>). You should try to always follow these guidelines.
> ❯ For an excellent video that shows how **not** to ask technical questions is this, watch [this YouTube video by LiveOverflow](<https://youtu.be/53zkBvL4ZB4>).
> ❯ [Asking technical questions (Clarkson)](<https://www.cs.cornell.edu/courses/cs3110/2017fa/thoughtful.html>)
> ❯ [How to ask questions the smart way (Raymond)](<http://www.catb.org/~esr/faqs/smart-questions.html>)
"""
hoisted = true

[bots]
keywords = ["bots", "sapphire bots", "bots using sapphire", "example bots", "examples", "slashbots", "chat input bots", "slash commands", "application commands"]
content = """
***__Discord bots that use @sapphire/framework v4__***
_ _
- **[Official Bot Examples ᴱ ᴰ ᴶˢ](<https://github.com/sapphiredev/examples>)**
- **[Gemboard ᴱ ᴰ](<https://github.com/sapphiredev/gemboard>)**
- **[Dragonite ᴱ ᴰ](<https://github.com/favware/dragonite>)**
- **[Radon ᴱ ᴬ](<https://github.com/EvolutionX-10/Radon>)**
- **[Sapphire Application Commands Examples ᴱ](<https://github.com/vladfrangu/sapphire-application-commands-examples>)**
- **[Archangel ᴱ ᴰ](<https://github.com/favware/archangel>)**
- **[Zeyr ᴰ ᴬ](<https://github.com/brxem/zeyr>)**
_ _
***__Discord bots that use @sapphire/framework v3__***
_ _
- **[Arima ᴱ](<https://github.com/arimajs/Arima>)**
- **[Nino ᴱ ᴰ](<https://github.com/uSebazz/Nino>)**
- **[Operator ᴱ ᴬ ᴰ](<https://github.com/Sly-Little-Fox/operator>)**
- **[Spectera ᴬ](<https://github.com/SpecteraLabs/Spectera>)**
_ _
***__Discord bots that use @sapphire/framework v2__***
_ _
- **[Materia ᴱ](<https://github.com/RealShadowNova/materia>)**
- **[RTByte ᴱ ᴬ](<https://github.com/RTByte/rtbyte>)**
- **[Skyra ᴬ ᴰ](<https://github.com/skyra-project/skyra>)**
- **[YliasDiscordBot ᴬ](<https://github.com/FrenchDiscord/YliasDiscordBot>)**
_ _
**ᴱ**: Uses ESM (if not specified then uses CJS)
**ᴬ**: Advanced bot (if not specified it is a simple bot, or not graded)
**ᴰ**: Uses Docker in production
**ᴶˢ**: Written in JavaScript. If not specified then the bot is written in TypeScript.
"""
hoisted = true

[dotnetfirstjslater]
keywords = ["dotnetfirstjslater"]
content = """
<@203709726322720768> says that JS and TS suck and you should write C# with .NET instead
"""

[eta]
keywords = ["eta"]
content = """
Estimated time of arrival for <query>:
When it's ready™️ *(+1 day whenever someone asks for an eta)* <a:_:735070572416991235>
"""

[good-font]
keywords = ["good-font", "best-font", "firacode", "jetbrainsmono", "jetbrains-mono", "coding-font", "cascadia-code", "hack", "source code pro"]
content = """
Here are some of the fonts we believe are the best when coding, in no specific order:

- <https://github.com/tonsky/FiraCode>
- <https://github.com/JetBrains/JetBrainsMono>
- <https://github.com/microsoft/cascadia-code>
- <https://github.com/adobe-fonts/source-code-pro>
- <https://github.com/source-foundry/Hack>

> Have a font you think would be a good addition to this list? Submit a [Pull Request to Spinel's tags](<https://github.com/sapphiredev/spinel>) and we'll review it!
"""

[guide]
keywords = ["guide", "how to"]
content = """
The guide for Sapphire and its many utilities, plugins and related libraries can be found on [our website](<https://www.sapphirejs.dev/docs/Guide/getting-started/getting-started-with-sapphire>)
"""
hoisted = true

[jsfirstbotlater]
keywords = ["jsfirstbotlater", "must know js"]
content = """
Before you make a Discord Bot, you should have a good understanding of JavaScript. This means you should have a basic understanding of the following topics:

- Read and understand docs
- Debug code
- Syntax
- NodeJS module system

If you aren't sure that your understanding of JavaScript is truly good enough to make a bot, you should really try to continue learning first. Here are good resources to learn both Javascript and NodeJS:

_Codecademy_: <https://www.codecademy.com/learn/javascript>
_Udemy_: <https://www.udemy.com/javascript-essentials/>
_Eloquent JavaScript, free book_: http://eloquentjavascript.net/
_You-Dont-Know-JS_: <https://github.com/getify/You-Dont-Know-JS>
_JavaScript Garden_: <https://bonsaiden.github.io/JavaScript-Garden/>
_JavaScript reference/docs_: <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference>
_Nodeschool_: <https://nodeschool.io/>
_Pluralsight_: <https://www.codeschool.com/courses/real-time-web-with-node-js>

Before you ask a question, you should ask these yourself:
**1)** Is this question related to JavaScript, or the library I am using? - If it is the library you are using, go to the proper server. You would get better answers there.
**2)** Have I tried to google and / or check StackOverflow? - Double check that you can't find anywhere that can lead you to a solution online.
**3)** Have I tried to look on MDN or the library documentation? - You should always check documentations to make sure you aren't missing how any details.
**4)** Does my question make enough sense so that people can understand it, and do they understand what I am trying to accomplish? - If no, revise your question. Give as much detail as possible. Include any error or code output that can help us help you.
**5)** Am I aware of what I am doing, and not just mindlessly copy and pasting? - If you are just copy and pasting code from a guide, you are not going to be able to solve anything. Make sure you understand the code you are writing.
"""

[legacy-deps]
keywords = ["legacy-deps", "legacy dependencies", "npm v7", "npm v8"]
content = """
**Having issues installing packages when using NPM v7 / v8?**
Add `--legacy-peer-deps` to your npm install command (every time) or run `npm config --global set legacy-peer-deps=true` just once to globally configure this same option.

~~or use Yarn which also deduplicates your dependencies automatically and especially Yarn V3 is waaaay faster than npm~~
"""

[showcode]
keywords = ["showcode", "talk is cheap, show me the code", "show the code"]
content = """
https://cdn.favware.tech/img/talkischeap.png
"""
hoisted = true

[moduleaug]
keywords = ["moduleaug", "module augmentation", "typescript declare module", "declare module"]
content = """
If you're adding custom properties to your Client class and you want them to be accessible when accessing the client through something like `this.container.client` you'll have to add module augmentation:

<https://gist.github.com/Favna/26ed5b2df82d424203b71b9ffbce85c4>

For more information on module augmentation see: <https://www.typescriptlang.org/docs/handbook/declaration-merging.html>
"""
hoisted = true

[slashies]
keywords = ["slashies"]
content = """
Application Commands are here! To get them up and running, just update to `@sapphire/framework@3.x` with your preferred package manager, and check out the [documentation](<https://www.sapphirejs.dev/docs/Guide/getting-started/getting-started-with-sapphire>) for more information on how to use them.
"""

[i18n]
keywords = ["i18n", "internationalization", "i18next", "language codes"]
content = """
For [`@sapphire/plugin-i18next`](<https://www.npmjs.com/package/@sapphire/plugin-i18next>) we follow the standardized format of [`<ISO-639-1 language code>`](<https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>)`-`[`<ISO3166-1 Country Code>`](<https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes>) for the language directories.

__Examples of valid languages codes are:__

**-** `de-DE` for German as spoken in Germany
**-** `en-GB` for English as spoken in Great Britain
**-** `en-US` for English as spoken in The United States
**-** `es-ES` for Spanish as spoken in Spain
**-** `fa-IR` for Persian as spoken in Iran
**-** `pt-BR` for Portuguese as spoken in Brazil
**-** `es-MX` for Spanish as spoken in Mexico
**-** `hi-IN` for Hindi as spoken in India
**-** `hi-Latn-IN` for Hindi, but using Latin characters, as spoken in India (also known as `Hinglish`)
**-** `ja-JP` for Japanese as spoken in Japan
**-** `nb-NO` for Norwegian Bokmal as spoken in Norway
**-** `nl-NL` for Dutch as spoken in The Netherlands
**-** `ro-RO` for Romanian as spoken in Romania
**-** `ru-RU` for Russian as spoken in Russia
**-** `sl-SI` for Slovenian as spoken in Slovenia
**-** `tr-TR` for Turkish as spoken in Turkey
"""

[hostingproviders]
keywords = ["hostingproviders", "hosting", "vps"]
content = """
**Affordable hosting providers:**
• [Netcup](<https://www.netcup.eu>) Starting at €2.62/mo for 1 core, 2GB RAM, 20GB SSD (You can get a totally free 10% discount code from <@242043489611808769> or <@268792781713965056>!)
• [OVH](<https://www.ovh.com/us/vps>) Starting at $3.35/mo for 1 core, 2GB RAM, 20GB SSD
• [DigitalOcean](<https://www.digitalocean.com>) Starting at $5/mo for 1 core, 1GB RAM, 25GB SSD
• [Linode](<https://www.linode.com>) Starting at $5/mo for 1 core, 1GB RAM, 25GB SSD
• [Vultr](<https://www.vultr.com>) Starting at $2.50/mo for 1 core, 512MB RAM, 10GB SSD
• [AWS Lightsail](<https://amazonlightsail.com>) Starting at $3.50/mo (first month free) for 1 core, 512MB RAM, 20GB SSD
• [Time4VPS](<https://www.time4vps.eu>) Starting at €3.99/month for 1 core, 2GB RAM, 20GB SSD
• [VIRMACH](<https://virmach.com>) Full Windows and Linux Desktop VPS starting at $7/mo and $1/mo respectively
• [GitHub education](<https://education.github.com/pack>) Free credit and other offers for students
• [Microsoft students](<https://azure.microsoft.com/en-us/free/students>) Free credit for students
• [Google Cloud](<https://cloud.google.com/free>) free tier
• [Wither Hosting](<https://client.witherhosting.com/cart/budget-vps/>) Starting at $4 a month for 1 core, 2GB ram, 25GB NVME storage.
• [Contabo](<https://contabo.com/en/vps/>) Starting at €4.99/mo for 4 cores, 8GB RAM, 50GB SSD (5€ setup fee)
"""

[help]
keywords = ["help", "built in help"]
content = """
Our experience in Klasa, and according to many Akairo users is that built-in help commands suck, and everyone customises them.

Furthermore, having built-in commands force you to add extra logic in your code (specifically everywhere that reads custom properties from commands), so if you rely on a property to exist, because it does in your commands, it'll break easily with built-in ones unless you overwrite them.

A help command is even worse, they give special constraints that shouldn't exist and can be implemented as you desire.

There's also the people who want to only show specific commands, a list of all commands in one embed, paginated commands, paginated lists of commands (based on categories), and all of that can be in either plain text, inside codeblocks (and from there, many syntaxes and formats), or embeds.

And to take things further, there are people who simply want to show all commands, and people who show only the commands they can use.

And so far we have only covered message based commands. Chat input commands are a whole different beast, because they have native descriptions and if you do have a /help for more details that could use autocomplete to fill out the command name.

If you take all the different ways to format commands, you end up with hundreds or thousands of different possibilities.

It is not possible for us to deliver a help command that complies to all those possibilities.

Therefore, everyone will eventually replace the built-in one with their own, so why take the effort?
"""

[regular-problems]
keywords = ["regular-problems", "commands no working", "pieces no working", "listeners no working"]
content = """
- Which version of `@sapphire/framework` are you using?
- What's your file/folder structure?
- Did you use the [CLI](<https://www.sapphirejs.dev/docs/Guide/CLI/introduction>) to generate your bot?
- What's your "main" property in `package.json`
- Are you using TypeScript? And if so, how are you compiling and running your code? That is to say, what are your build and startup scripts?
- In case you are using version 3.0.0 or higher of `@sapphire/framework`, and your problem related to message commands, did you add [`loadMessageCommandListeners`](<https://www.sapphirejs.dev/docs/Documentation/api-framework/interfaces/SapphireClientOptions#loadmessagecommandlisteners>) to your [`SapphireClient`](<https://www.sapphirejs.dev/docs/Documentation/api-framework/classes/SapphireClient>) [`options`](<https://www.sapphirejs.dev/docs/Documentation/api-framework/interfaces/SapphireClientOptions#properties>)

Remember that if you are new to `@sapphire/framework` it is important that you read the [user guide](<https://www.sapphirejs.dev/docs/Guide/getting-started/getting-started-with-sapphire>).

"""

[matching-parameters]
keywords = ["matching-parameters", "params", "matching parameters", "matching params", "parameters"]
content = """
The order of function parameters must match between definition and function call.
```js
function execute(client, message, args) { ... };
execute(message, client, args);
```
• mismatch! you pass a Message where the client is expected
• mismatch! you pass the Client where a Message is expected
"""

[ts-node]
keywords = ["ts-node", "tsnode"]
content = """
_TL;DR: Do not use [`ts-node`](<https://github.com/TypeStrong/ts-node>), use [`tsc-watch`](<https://www.npmjs.com/package/tsc-watch>) instead._

We very strongly discourage using [`ts-node`](<https://github.com/TypeStrong/ts-node>) because it was never meant to be used for bots.

[`ts-node`](<https://github.com/TypeStrong/ts-node>) is designed for [`REPL`](<https://en.wikipedia.org/wiki/Read-eval-print_loop>) purposes. That's short for `Read Eval Print Loop`.
Which means to read some code, dump it in an `eval()` statement, print the result, and loop.

**_A discord bot is not that._**

A Discord bot sets up a permanent websocket connection to the discord server and connects to the rest gateway.
There is read yes, but **no eval**, **no print**, and **no loop**.

**So what should you use instead?**

The most ideal way is to just use the `watch` flag of `tsc` (`tsc --watch`) and run `node dist/index.js` to run your bot, then cancel that process and restart it when you have changes that require restarting.
You would open 2 terminal tabs, 1 in which you run `tsc --watch` and another in which you run the bot.
This is in particular the most ideal way, because Discord has a limit to the amount of times you can login with your bot, or register commands, per day.
Constantly logging in over and over again due to an auto-restarting process will get you close to that limit very quickly and once you exceed it, your development will be halted entirely for the current day.

However, this can be quite tedious so a great package to use instead is [`tsc-watch`](<https://www.npmjs.com/package/tsc-watch>).
"""

[yarnv3]
keywords = ["yarn", "yarnv3"]
content = """
Yarn v3 is new version of Yarn that we recommend switching to as Yarn v1 has been deprecated.

> "But I don't see any update on [source]?"

That is correct. Yarn v3 is installed through Yarn itself. Your global toolchain is and will always remain to be Yarn v1, however, you configure Yarn v3 on a per-project basis. How? Simply write:
```sh
yarn set version berry
```
This will download the new Yarn v3 binary and put in `.yarn/releases`, you should push this to your Git repository. It will also create a `.yarnrc.yml` file which configures the path which you should also commit.

Next you probably also want to run the following 2 commands:
```sh
yarn config set enableGlobalCache true
yarn config set nodeLinker node-modules
```
This will add to your `.yarnrc` file:
```yaml
enableGlobalCache: true
nodeLinker: node-modules
```
Which ensures that you just have a Yarn v1-like experience with `node_modules` and a global cache.

Next step is to nuke your `node_modules` and `yarn.lock` and run `yarn install`

Then some final adjustments. Put this in you `.gitignore`:
```properties
# Yarn files
.yarn/install-state.gz
.yarn/build-state.yml
```
And anywhere in your scripts in package.json where you use `*` you should wrap it in extra `\"`
For example:
```json
{
	"format": "prettier --write \\"src/**/*.ts\\""
}
```
Mind you this last thing is good add regardless of script runner / package bundler because it ensures the glob is performed by the library and not by your shell, which may differ when people develop on different operating systems.

In short the command to set everything up you can run:
```sh
yarn set version berry && yarn config set enableGlobalCache true && yarn config set nodeLinker node-modules && echo "" >> .gitignore && echo "# Yarn files" >> .gitignore && echo ".yarn/install-state.gz" >> .gitignore && echo ".yarn/build-state.yml" >> .gitignore
```
"""

[whysapphire]
keywords = ["whysapphire", "sapphire"]
content = """
**What is so good about Sapphire?**

That's like asking what's so good about cornflakes. It'll get a very subjective answer.

Sapphire is the official bot framework for discordjs for starters. Take that for what you will.

Other than that the core reason to use sapphire is because sooner or later when writing any half serious bot you'll be writing your own command handler if you don't use sapphire and why would you willingly maintain your own code, likely lacking features and potentially with bugs and/or crappy performance and/or non scalability, when you can use Sapphire which has all of the same features, guarantees near to no bugs (and any bugs get patched), great performance and great scalability. Saves you work on the menial tasks, and frees that time to actually bring a bot to production which was the original end goal.
"""
